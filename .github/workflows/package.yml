name: Build and Package React App
on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout source project
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch-name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Debug Repository Access
        run: |
          echo "Testing repository access..."
          curl -H "Authorization: token ${{ secrets.ORG_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/Trading-automation-developement/hooliLaunchPackage

      - name: Checkout electron packaging project
        uses: actions/checkout@v4
        with:
          repository: Trading-automation-developement/hooliLaunchPackage
          token: ${{ secrets.ORG_TOKEN }}
          path: electron-project
          ref: master
          lfs: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine64 wine32

      - name: Build React App
        working-directory: ./ClientSide/client
        run: |
          npm install --package-lock-only
          npm install
          CI=false npm run build

      - name: Create fix-paths script
        working-directory: ./ClientSide/client
        run: |
          echo '
          const fs = require("fs");
          const path = require("path");
          const buildDir = path.join("build");
          const indexPath = path.join(buildDir, "index.html");
          let originalHtml = fs.readFileSync(indexPath, "utf8");
          const cssHash = originalHtml.match(/main\.(.*?)\.css/)[1];
          const jsHash = originalHtml.match(/main\.(.*?)\.js/)[1];
          const newHtml = String.raw`
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8" />
              <link rel="icon" href="./favicon.ico" />
              <meta name="viewport" content="width=device-width,initial-scale=1" />
              <meta name="theme-color" content="#000000" />
              <meta name="description" content="Modern React application" />
              <link rel="apple-touch-icon" href="./logo152.png" />
              <link rel="manifest" href="./manifest.json" />
              <link href="./static/css/main.${cssHash}.css" rel="stylesheet" type="text/css" />
              <title>Your App Name</title>
              <script defer="defer" src="./static/js/main.${jsHash}.js" type="text/javascript"></script>
              <script>
                if (typeof process === "object") {
                  window.__dirname = process.cwd();
                  window.ipcRenderer = require("electron").ipcRenderer;
                }
              </script>
            </head>
            <body>
              <noscript>You need to enable JavaScript to run this application.</noscript>
              <div id="root"></div>
            </body>
          </html>
          `;
          fs.writeFileSync(indexPath, newHtml);
          console.log("Updated index.html with correct paths and MIME types");
          ' > fix-paths.js

      - name: Run fix-paths script
        working-directory: ./ClientSide/client
        run: node fix-paths.js

      - name: Clear and Create electron build directory
        run: |
          rm -rf electron-project/build
          mkdir -p electron-project/build

      - name: Copy build files to electron project
        run: |
          cp -r ClientSide/client/build/* electron-project/build/

      - name: Create electron-builder config
        working-directory: ./electron-project
        run: |
          cat << 'EOL' > electron-builder.json
          {
            "productName": "Hooli Launch",
            "appId": "com.hooli.launch",
            "directories": {
              "output": "dist"
            },
            "win": {
              "target": [
                {
                  "target": "nsis",
                  "arch": ["x64"]
                }
              ],
              "artifactName": "Hooli Launch Setup ${version}.exe"
            },
            "nsis": {
              "oneClick": false,
              "allowToChangeInstallationDirectory": true,
              "createDesktopShortcut": true,
              "createStartMenuShortcut": true
            }
          }
          EOL

      - name: Update package.json
        working-directory: ./electron-project
        shell: bash
        run: |
          cat << 'EOL' > update-package.js
          const fs = require("fs");
          const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
          
          // Update basic info
          pkg.description = pkg.description || "Hooli Launch Application";
          pkg.author = pkg.author || {
            "name": "Hooli Launch Team",
            "email": "your-email@example.com"
          };
          
          // Add or update scripts
          pkg.scripts = {
            ...(pkg.scripts || {}),
            "postinstall": "electron-builder install-app-deps",
            "build": "electron-builder"
          };
          
          fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
          EOL
          node update-package.js

      - name: Setup Electron Builder
        working-directory: ./electron-project
        run: |
          npm install --save-dev electron@28.3.3 electron-builder@latest
          npm install --save-dev @electron/remote@latest
          npm install --save-dev @electron/rebuild@latest

      - name: Run electron-builder
        working-directory: ./electron-project
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install
          npx electron-builder --config electron-builder.json --win --x64

      # Rest of the steps remain the same (Google Cloud SDK, upload script, etc.)
      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' > service-account.json
          gcloud auth activate-service-account --key-file=service-account.json

      - name: Install Google Drive CLI tool
        run: |
          pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Create upload script
        shell: bash
        run: |
          cat << 'EOL' > upload.py
          # Your existing upload.py script content
          EOL

      - name: Run upload script
        env:
          FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        run: python3 upload.py

      - name: Configure Git for version update
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Update version
        id: version
        working-directory: ./electron-project
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          
          sed -i "s/\"version\": \"$VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          git add package.json
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            New release version ${{ steps.version.outputs.new_version }}
            
            Changes in this release:
            - Updated build artifacts
            - Automated version bump
            - Electron package updated
          draft: false
          prerelease: false
