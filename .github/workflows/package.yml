name: Build and Package React App
on:
 push:
   branches: ['**']
   paths-ignore: ['**.md', 'docs/**']
 pull_request:
   branches: ['**']

jobs:
 build:
   runs-on: ubuntu-latest
   permissions:
     contents: write
     id-token: write

   steps:
     - name: Checkout source
       uses: actions/checkout@v4

     - name: Get branch name
       id: branch-name
       run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

     - name: Checkout electron project
       uses: actions/checkout@v4
       with:
         repository: Trading-automation-developement/hooliLaunchPackage
         token: ${{ secrets.ORG_TOKEN }}
         path: electron-project
         ref: master

     - name: Setup Node.js
       uses: actions/setup-node@v4
       with:
         node-version: '20.x'
         registry-url: 'https://registry.npmjs.org'

     - name: Install Wine
       run: |
         sudo dpkg --add-architecture i386
         sudo apt-get update
         sudo apt-get install -y wine64 wine32

     - name: Build React App
       working-directory: ./ClientSide/client
       run: |
         npm install --package-lock-only
         npm install
         CI=false npm run build

     - name: Create fix-paths script
       working-directory: ./ClientSide/client
       run: |
         cat << 'EOL' > fix-paths.js
         const fs = require("fs");
         const path = require("path");
         const buildDir = path.join("build");
         const indexPath = path.join(buildDir, "index.html");
         console.log("Reading from:", indexPath);
         let originalHtml = fs.readFileSync(indexPath, "utf8");
         const cssMatch = originalHtml.match(/main\.(.*?)\.css/);
         const jsMatch = originalHtml.match(/main\.(.*?)\.js/);
         if (!cssMatch || !jsMatch) {
           console.error("Could not find CSS or JS files in HTML");
           process.exit(1);
         }
         const cssHash = cssMatch[1];
         const jsHash = jsMatch[1];
         const newHtml = `
         <!DOCTYPE html>
         <html lang="en">
           <head>
             <meta charset="utf-8" />
             <base href="./" />
             <link rel="icon" href="favicon.ico" />
             <meta name="viewport" content="width=device-width,initial-scale=1" />
             <meta name="theme-color" content="#000000" />
             <meta name="description" content="Hooli Launch Application" />
             <link rel="apple-touch-icon" href="logo152.png" />
             <link rel="manifest" href="manifest.json" />
             <link href="static/css/main.${cssHash}.css" rel="stylesheet" type="text/css" />
             <title>Hooli Launch</title>
           </head>
           <body>
             <div id="root"></div>
             <script>
               if (typeof process === "object") {
                 window.__dirname = process.cwd();
                 window.ipcRenderer = require("electron").ipcRenderer;
               }
             </script>
             <script type="text/javascript" src="static/js/main.${jsHash}.js"></script>
           </body>
         </html>`;
         fs.writeFileSync(indexPath, newHtml);
         console.log("Updated index.html with correct paths");
         EOL
         node fix-paths.js

     - name: Create electron main.js
       working-directory: ./electron-project
       run: |
         cat << 'EOL' > main.js
         const { app, BrowserWindow } = require('electron');
         const path = require('path');
         
         function createWindow() {
           const win = new BrowserWindow({
             width: 1200,
             height: 800,
             webPreferences: {
               nodeIntegration: true,
               contextIsolation: false,
               enableRemoteModule: true
             }
           });
         
           win.loadFile(path.join(__dirname, 'build', 'index.html'));
         }
         
         app.whenReady().then(createWindow);
         
         app.on('window-all-closed', () => {
           if (process.platform !== 'darwin') {
             app.quit();
           }
         });
         
         app.on('activate', () => {
           if (BrowserWindow.getAllWindows().length === 0) {
             createWindow();
           }
         });
         EOL

     - name: Copy build files
       run: |
         rm -rf electron-project/build
         cp -r ClientSide/client/build electron-project/
         echo "Verifying copied files:"
         ls -R electron-project/build/

     - name: Setup Electron Builder
       working-directory: ./electron-project
       run: |
         rm -rf node_modules package-lock.json
         npm install --save-dev electron@28.3.3 electron-builder@latest @electron/remote@latest
         
         cat << 'EOL' > update-package.js
         const fs = require("fs");
         const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
         pkg.description = "Hooli Launch Application";
         pkg.author = { "name": "Hooli Launch Team", "email": "your-email@example.com" };
         pkg.main = "main.js";
         pkg.scripts = {
           "start": "electron .",
           "build": "electron-builder build",
           "postinstall": "electron-builder install-app-deps"
         };
         fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
         EOL
         node update-package.js

     - name: Run electron-builder
       id: build-electron
       working-directory: ./electron-project
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         npm install
         npx electron-builder build --win --x64 --publish never
         echo "build_success=true" >> $GITHUB_OUTPUT

     - name: Upload to Google Drive
       id: upload
       if: steps.build-electron.outputs.build_success == 'true'
       env:
         FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
       run: |
         echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' > service-account.json
         python3 upload.py
         echo "upload_success=true" >> $GITHUB_OUTPUT

     - name: Update version
       if: steps.upload.outputs.upload_success == 'true'
       id: version
       working-directory: ./electron-project
       run: |
         git config --global user.email "github-actions[bot]@users.noreply.github.com"
         git config --global user.name "github-actions[bot]"
         
         VERSION=$(node -p "require('./package.json').version")
         MAJOR=$(echo $VERSION | cut -d. -f1)
         MINOR=$(echo $VERSION | cut -d. -f2)
         PATCH=$(echo $VERSION | cut -d. -f3)
         NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
         
         sed -i "s/\"version\": \"$VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
         echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
         
         git add package.json
         git commit -m "Bump version to $NEW_VERSION [skip ci]"
         git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

     - name: Create Release
       if: steps.version.outputs.new_version != ''
       uses: actions/create-release@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: v${{ steps.version.outputs.new_version }}
         release_name: Release v${{ steps.version.outputs.new_version }}
         body: |
           Release v${{ steps.version.outputs.new_version }}
           
           Changes:
           - Updated build artifacts
           - Electron package updated
         draft: false
         prerelease: false

     - name: Upload Release Asset
       if: steps.version.outputs.new_version != ''
       uses: actions/upload-release-asset@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: ./electron-project/dist/Hooli Launch Setup ${{ steps.version.outputs.new_version }}.exe
         asset_name: HooliLaunch-Setup-${{ steps.version.outputs.new_version }}.exe
         asset_content_type: application/octet-stream
