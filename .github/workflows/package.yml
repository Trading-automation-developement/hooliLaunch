name: Build and Package React App
on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout source project
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch-name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Debug Repository Access
        run: |
          echo "Testing repository access..."
          curl -H "Authorization: token ${{ secrets.ORG_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/Trading-automation-developement/hooliLaunchPackage

      - name: Checkout electron packaging project
        uses: actions/checkout@v4
        with:
          repository: Trading-automation-developement/hooliLaunchPackage
          token: ${{ secrets.ORG_TOKEN }}
          path: electron-project
          ref: master
          lfs: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine64 wine32

      - name: Build React App
        working-directory: ./ClientSide/client
        run: |
          npm install --package-lock-only
          npm install
          CI=false npm run build

      - name: Debug React build output
        working-directory: ./ClientSide/client
        run: |
          echo "Contents of build directory:"
          ls -R build/

      - name: Create fix-paths script
        working-directory: ./ClientSide/client
        run: |
          echo '
          const fs = require("fs");
          const path = require("path");
          
          const buildDir = path.join("build");
          const indexPath = path.join(buildDir, "index.html");
          
          console.log("Reading from:", indexPath);
          let originalHtml = fs.readFileSync(indexPath, "utf8");
          
          // Extract CSS and JS hashes
          const cssMatch = originalHtml.match(/main\.(.*?)\.css/);
          const jsMatch = originalHtml.match(/main\.(.*?)\.js/);
          
          if (!cssMatch || !jsMatch) {
            console.error("Could not find CSS or JS files in HTML");
            process.exit(1);
          }
          
          const cssHash = cssMatch[1];
          const jsHash = jsMatch[1];
          
          const newHtml = `
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="utf-8" />
              <base href="./" />
              <link rel="icon" href="favicon.ico" />
              <meta name="viewport" content="width=device-width,initial-scale=1" />
              <meta name="theme-color" content="#000000" />
              <meta name="description" content="Hooli Launch Application" />
              <link rel="apple-touch-icon" href="logo152.png" />
              <link rel="manifest" href="manifest.json" />
              <link href="static/css/main.${cssHash}.css" rel="stylesheet" type="text/css" />
              <title>Hooli Launch</title>
            </head>
            <body>
              <div id="root"></div>
              <script>
                if (typeof process === "object") {
                  window.__dirname = process.cwd();
                  window.ipcRenderer = require("electron").ipcRenderer;
                }
              </script>
              <script type="text/javascript" src="static/js/main.${jsHash}.js"></script>
            </body>
          </html>`;
          
          fs.writeFileSync(indexPath, newHtml);
          console.log("Updated index.html with correct paths");
          ' > fix-paths.js

      - name: Run fix-paths script
        working-directory: ./ClientSide/client
        run: node fix-paths.js

      - name: Verify build structure
        working-directory: ./ClientSide/client
        run: |
          echo "Verifying build structure..."
          
          # Check essential files
          [ -f "build/index.html" ] && echo "✓ index.html exists" || (echo "✗ index.html missing" && exit 1)
          [ -d "build/static" ] && echo "✓ static directory exists" || (echo "✗ static directory missing" && exit 1)
          [ -d "build/static/css" ] && echo "✓ css directory exists" || (echo "✗ css directory missing" && exit 1)
          [ -d "build/static/js" ] && echo "✓ js directory exists" || (echo "✗ js directory missing" && exit 1)
          
          echo "Final build contents:"
          ls -la build/
          echo "CSS files:"
          ls -la build/static/css/
          echo "JS files:"
          ls -la build/static/js/

      - name: Clear and Create electron build directory
        run: |
          rm -rf electron-project/build
          mkdir -p electron-project/build

      - name: Copy build files to electron project
        run: |
          cp -rv ClientSide/client/build/* electron-project/build/
          echo "Verifying copied files:"
          ls -R electron-project/build/
          
      - name: Debug Files
        working-directory: ./electron-project
        run: |
          echo "Current directory contents:"
          ls -la
          echo "\nPackage.json content:"
          cat package.json

      - name: Create electron-builder config
        working-directory: ./electron-project
        run: |
          cat << 'EOL' > electron-builder.json
          {
            "productName": "Hooli Launch",
            "appId": "com.hooli.launch",
            "directories": {
              "output": "dist",
              "buildResources": "build"
            },
            "files": [
              "build/**/*",
              "**/*.js",
              "package.json"
            ],
            "publish": null,
            "win": {
              "target": [
                {
                  "target": "nsis",
                  "arch": ["x64"]
                }
              ],
              "artifactName": "Hooli Launch Setup ${version}.exe"
            },
            "nsis": {
              "oneClick": false,
              "allowToChangeInstallationDirectory": true,
              "createDesktopShortcut": true,
              "createStartMenuShortcut": true
            }
          }
          EOL


      - name: Setup Electron Builder
        working-directory: ./electron-project
        run: |
          rm -rf node_modules
          rm -f package-lock.json
          
          # Create update-package.js
          cat << 'EOL' > update-package.js
          const fs = require("fs");
          const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
          pkg.description = "Hooli Launch Application";
          pkg.author = { "name": "Hooli Launch Team", "email": "your-email@example.com" };
          pkg.scripts = {
            "start": "electron .",
            "build": "electron-builder build",
            "build:workflow": "electron-builder build --win --x64",
            "postinstall": "electron-builder install-app-deps"
          };
          fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
          EOL
          
          npm install --save-dev electron@28.3.3 electron-builder@latest @electron/remote@latest
          node update-package.js
          
      - name: Run electron-builder
        working-directory: ./electron-project  
        run: |
          npx electron-builder build --win --x64 --publish never
        env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' > service-account.json
          gcloud auth activate-service-account --key-file=service-account.json

      - name: Install Google Drive CLI tool
        run: |
          pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

      - name: Create upload script
        shell: bash
        run: |
          cat << 'EOL' > upload.py
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          from googleapiclient.errors import HttpError
          import os
          import json
          import re
          import glob
          
          def get_latest_version(service, folder_id):
              try:
                  results = service.files().list(
                      q=f"'{folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and name starts with 'v'",
                      fields="nextPageToken, files(name)",
                      orderBy="name desc",
                      pageSize=1000
                  ).execute()
          
                  folders = results.get('files', [])
                  print(f"Found folders: {[f['name'] for f in folders]}")
          
                  if not folders:
                      return 0
          
                  version_numbers = []
                  for folder in folders:
                      match = re.search(r'v(\d+)', folder['name'])
                      if match:
                          version_numbers.append(int(match.group(1)))
          
                  if not version_numbers:
                      return 0
          
                  latest_version = max(version_numbers)
                  print(f"Latest version found: v{latest_version}")
                  return latest_version
          
              except Exception as e:
                  print(f"Error getting latest version: {str(e)}")
                  return 0
          
          try:
              credentials = service_account.Credentials.from_service_account_file(
                  'service-account.json',
                  scopes=[
                      'https://www.googleapis.com/auth/drive',
                      'https://www.googleapis.com/auth/drive.file',
                      'https://www.googleapis.com/auth/drive.metadata'
                  ]
              )
          
              service_account_info = json.load(open('service-account.json'))
              print(f"Using service account: {service_account_info['client_email']}")
          
              service = build('drive', 'v3', credentials=credentials)
              base_folder_id = os.environ['FOLDER_ID']
          
              latest_version = get_latest_version(service, base_folder_id)
              new_version = latest_version + 1
              version_folder_name = f"v{new_version}"
          
              print(f"Creating new version folder: {version_folder_name}")
          
              version_folder_metadata = {
                  'name': version_folder_name,
                  'mimeType': 'application/vnd.google-apps.folder',
                  'parents': [base_folder_id]
              }
          
              version_folder = service.files().create(
                  body=version_folder_metadata,
                  fields='id'
              ).execute()
          
              version_folder_id = version_folder.get('id')
              print(f"Created version folder: {version_folder_name}")
          
              # Get package version from package.json
              with open('electron-project/package.json', 'r') as f:
                  pkg_version = json.load(f)['version']
          
              # List all files in dist directory
              print("Files in dist directory:")
              dist_files = os.listdir('electron-project/dist')
              for f in dist_files:
                  print(f"  - {f}")
          
              # Find the setup file
              setup_file_pattern = f'electron-project/dist/Hooli Launch Setup*.exe'
              setup_files = glob.glob(setup_file_pattern)
          
              if setup_files:
                  file_path = setup_files[0]  # Use the first matching file
                  print(f"Found setup file: {file_path}")
          
                  file_metadata = {
                      'name': f'HooliLaunch-Setup-{pkg_version}.exe',
                      'parents': [version_folder_id]
                  }
          
                  media = MediaFileUpload(
                      file_path,
                      mimetype='application/octet-stream',
                      resumable=True
                  )
          
                  print(f"Starting file upload to folder {version_folder_name}")
                  file = service.files().create(
                      body=file_metadata,
                      media_body=media,
                      fields='id,name',
                      supportsAllDrives=True
                  ).execute()
          
                  print(f'File uploaded successfully to {version_folder_name}/')
                  print(f'File ID: {file.get("id")}, Name: {file.get("name")}')
          
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                      print(f'folder_version={new_version}', file=fh)
              else:
                  print("Error: No setup file found matching pattern:", setup_file_pattern)
                  print("Files in directory:", dist_files)
                  exit(1)
          
          except Exception as e:
              print(f"Error during upload process: {str(e)}")
              raise e
          EOL

      - name: Run upload script
        env:
          FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        run: python3 upload.py

      - name: Configure Git for version update
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Update version
        id: version
        working-directory: ./electron-project
        run: |
          VERSION=$(node -p "require('./package.json').version")
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          
          sed -i "s/\"version\": \"$VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          git add package.json
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            New release version ${{ steps.version.outputs.new_version }}
            
            Changes in this release:
            - Updated build artifacts
            - Automated version bump
            - Electron package updated
          draft: false
          prerelease: false
